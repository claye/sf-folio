{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport { color, background, space, border, typography, shadow, flexbox, layout } from \"styled-system\";\nconst ButtonStyled = styled.button`\n  font-size: 13px;\n  font-weight: 700;\n  letter-spacing: 1.63px;\n  text-transform: uppercase;\n  padding: 23px 30px;\n  border-radius: 50rem;\n  display: inline-flex;\n  align-items: center;\n  justify-content: space-between;\n  user-select: none;\n  position: relative;\n  overflow: hidden;\n  border: none;\n  outline: none !important;\n  white-space: nowrap;\n  border: 1px solid transparent;\n  background: transparent;\n  color: ${({\n  theme,\n  color\n}) => theme.colors[color]};\n  ${color};\n  ${background};\n  ${border};\n  ${space};\n  ${typography};\n  ${shadow};\n  ${flexbox};\n  ${layout};\n  transition: 0.4s ease-out;\n\n  &:hover,\n  &:focus,\n  &:active {\n    color: #fff;\n    background: ${({\n  theme,\n  variant\n}) => theme.colors[variant]};\n    border-color: ${({\n  theme,\n  variant\n}) => theme.colors[variant]};\n  }\n`;\n\nconst Button = (_ref) => {\n  let {\n    variant = \"primary\",\n    color = \"front\",\n    borderColor = \"frontShade\",\n    arrowRight = false,\n    children\n  } = _ref,\n      rest = _objectWithoutProperties(_ref, [\"variant\", \"color\", \"borderColor\", \"arrowRight\", \"children\"]);\n\n  return __jsx(ButtonStyled, _extends({\n    variant: variant,\n    color: color,\n    borderColor: borderColor\n  }, rest), children, arrowRight && __jsx(\"svg\", {\n    id: \"SVGDoc\",\n    width: \"18\",\n    height: \"12\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    version: \"1.1\",\n    viewBox: \"0 0 18 12\",\n    css: `\n            margin-left: 1.5rem;\n          `\n  }, __jsx(\"defs\", null), __jsx(\"desc\", null, \"Generated with Avocode.\"), __jsx(\"g\", null, __jsx(\"g\", null, __jsx(\"title\", null, \"tail-right\"), __jsx(\"g\", null, __jsx(\"title\", null, \"Path\"), __jsx(\"path\", {\n    d: \"M1,5.5h16\",\n    fillOpacity: \"0\",\n    fill: \"#ffffff\",\n    strokeLinejoin: \"round\",\n    strokeLinecap: \"round\",\n    strokeOpacity: \"1\",\n    stroke: \"#ffffff\",\n    strokeMiterlimit: \"20\",\n    strokeWidth: \"2\"\n  })), __jsx(\"g\", null, __jsx(\"title\", null, \"Path\"), __jsx(\"path\", {\n    d: \"M12,1v0l5,5v0l-5,5v0\",\n    fillOpacity: \"0\",\n    fill: \"#ffffff\",\n    strokeLinejoin: \"round\",\n    strokeLinecap: \"round\",\n    strokeOpacity: \"1\",\n    stroke: \"#ffffff\",\n    strokeMiterlimit: \"20\",\n    strokeWidth: \"2\"\n  }))))));\n};\n\nexport default Button;","map":null,"metadata":{},"sourceType":"module"}