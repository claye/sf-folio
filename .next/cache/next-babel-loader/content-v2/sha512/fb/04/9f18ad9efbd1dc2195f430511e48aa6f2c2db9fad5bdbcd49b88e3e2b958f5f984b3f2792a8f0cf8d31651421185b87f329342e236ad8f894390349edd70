{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { useState, useContext } from \"react\";\nimport styled from \"styled-components\";\nimport { ListGroup, Collapse } from \"react-bootstrap\";\nimport { FaAngleRight, FaAngleDown } from \"react-icons/fa\";\nimport Link from \"next/link\";\nimport GlobalContext from \"../../context/GlobalContext\";\nconst NestedMenuContainer = styled.div`\n  a {\n    color: ${({\n  theme\n}) => theme.colors.dark} !important;\n    transition: all 0.3s ease-out;\n    font-weight: 700;\n    text-transform: lowercase;\n\n    &:hover,\n    &:active {\n      color: ${({\n  theme\n}) => theme.colors.primary};\n      text-decoration: none;\n    }\n  }\n\n  .list-group-item {\n    font-weight: 700;\n    text-transform: lowercase;\n    color: ${({\n  theme\n}) => theme.colors.dark};\n    &:hover,\n    &:active,\n    &.active {\n      color: ${({\n  theme\n}) => theme.colors.primary};\n      text-decoration: none;\n      background-color: transparent;\n      border-bottom: 1px solid rgba(22, 28, 45, 0.125);\n    }\n\n    & + .collapse:not(.show) {\n      .list-group-item {\n        border: none !important;\n        border-width: 0 !important;\n      }\n    }\n    & + .collapse.show {\n      .list-group-item {\n        &:first-child {\n          border-top: none !important;\n        }\n      }\n    }\n  }\n  .collapse + .list-group-item {\n    border-top-width: 0;\n  }\n  /* .list-group-flush:last-child .list-group-item:last-child {\n    border-bottom-width: 1px;\n  } */\n`;\nconst defaultMenuItems = [{\n  name: \"home\",\n  label: \"Home\"\n}, {\n  name: \"billing\",\n  label: \"Billing\",\n  items: [{\n    name: \"statements\",\n    label: \"Statements\"\n  }, {\n    name: \"reports\",\n    label: \"Reports\"\n  }]\n}, {\n  name: \"settings\",\n  label: \"Settings\",\n  items: [{\n    name: \"profile\",\n    label: \"Profile\"\n  }, {\n    name: \"insurance\",\n    label: \"Insurance\"\n  }, {\n    name: \"notifications\",\n    label: \"Notifications\",\n    items: [{\n      name: \"email\",\n      label: \"Email\"\n    }, {\n      name: \"desktop\",\n      label: \"Desktop\",\n      items: [{\n        name: \"schedule\",\n        label: \"Schedule\"\n      }, {\n        name: \"frequency\",\n        label: \"Frequency\"\n      }]\n    }, {\n      name: \"sms\",\n      label: \"SMS\"\n    }]\n  }]\n}];\n\nconst MenuItem = (_ref) => {\n  let {\n    label,\n    isExternal = false,\n    name,\n    items,\n    depthStep = 20,\n    depth = 0\n  } = _ref,\n      rest = _objectWithoutProperties(_ref, [\"label\", \"isExternal\", \"name\", \"items\", \"depthStep\", \"depth\"]);\n\n  const {\n    0: open,\n    1: setOpen\n  } = useState(false);\n  const hasSubItems = Array.isArray(items);\n  const gContext = useContext(GlobalContext);\n  return __jsx(React.Fragment, null, hasSubItems ? __jsx(ListGroup.Item, _extends({}, rest, {\n    css: `\n            padding-left: ${depth * depthStep}px !important;\n            padding-right: 0 !important;\n            cursor: pointer;\n          `,\n    onClick: () => setOpen(!open),\n    className: `d-flex align-items-center justify-content-between ${open ? \"active\" : \"\"}`\n  }), __jsx(\"span\", null, label), __jsx(\"span\", null, open ? __jsx(FaAngleDown, null) : __jsx(FaAngleRight, null))) : __jsx(ListGroup.Item, _extends({}, rest, {\n    css: `\n            padding-left: ${depth * depthStep}px !important;\n            padding-right: 0 !important;\n          `\n  }), isExternal ? __jsx(\"a\", {\n    href: `${name}`,\n    onClick: () => {\n      if (gContext.visibleOffCanvas) {\n        gContext.toggleOffCanvas();\n      }\n    }\n  }, label) : __jsx(Link, {\n    href: `/${name}`\n  }, __jsx(\"a\", {\n    onClick: () => {\n      if (gContext.visibleOffCanvas) {\n        gContext.toggleOffCanvas();\n      }\n    }\n  }, label))), hasSubItems ? __jsx(Collapse, {\n    in: open\n  }, __jsx(ListGroup, null, items.map(subItem => __jsx(MenuItem, _extends({\n    key: subItem.name,\n    depth: depth + 1,\n    depthStep: depthStep\n  }, subItem))))) : null);\n};\n\nconst NestedMenu = ({\n  menuItems = defaultMenuItems\n}) => {\n  const gContext = useContext(GlobalContext);\n  return __jsx(NestedMenuContainer, null, __jsx(ListGroup, {\n    variant: \"flush\"\n  }, menuItems.map((menuItem, index) => __jsx(MenuItem, _extends({\n    key: `${menuItem.name}${index}`,\n    depthStep: 20,\n    depth: 0\n  }, menuItem))), __jsx(ListGroup.Item, {\n    css: `\n            padding-left: 0px !important;\n            padding-right: 0 !important;\n          `\n  }, __jsx(\"a\", {\n    href: \"/#\",\n    onClick: e => {\n      e.preventDefault();\n      gContext.toggleAbout();\n\n      if (gContext.visibleOffCanvas) {\n        gContext.toggleOffCanvas();\n      }\n    }\n  }, \"about me.\")), __jsx(ListGroup.Item, {\n    css: `\n            padding-left: 0px !important;\n            padding-right: 0 !important;\n          `\n  }, __jsx(\"a\", {\n    href: \"/#\",\n    onClick: e => {\n      e.preventDefault();\n      gContext.toggleContact();\n\n      if (gContext.visibleOffCanvas) {\n        gContext.toggleOffCanvas();\n      }\n    }\n  }, \"contact.\"))));\n};\n\nexport default NestedMenu;","map":null,"metadata":{},"sourceType":"module"}