{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport { color, space, typography, shadow } from \"styled-system\";\nconst Paragraph = styled.p`\n  margin-bottom: 0;\n  font-weight: 400;\n  font-size: 1.0625rem;\n  letter-spacing: -0.2px;\n  line-height: 1.71;\n\n  ${color};\n  ${space};\n  ${typography};\n  ${shadow};\n`;\nconst ParagraphLg = styled(Paragraph)`\n  font-size: 21px;\n  font-weight: 400;\n  letter-spacing: -0.66px;\n  line-height: 38px;\n  ${color};\n  ${space};\n  ${typography};\n  ${shadow};\n`;\nconst ParagraphSmall = styled(Paragraph)`\n  font-size: 16px;\n  letter-spacing: -0.5px;\n  line-height: 28px;\n  ${color};\n  ${space};\n  ${typography};\n  ${shadow};\n`;\nconst ParagraphTag = styled(Paragraph)`\n  font-size: 0.8125rem;\n  line-height: 1.63;\n  letter-spacing: 1.63px;\n  font-weight: 700;\n  text-transform: uppercase;\n  ${color};\n  ${space};\n  ${typography};\n  ${shadow};\n`;\n\nconst Text = (_ref) => {\n  let {\n    variant = \"lg\"\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"variant\"]);\n\n  let TextRender;\n\n  switch (variant) {\n    case \"lg\":\n      TextRender = ParagraphLg;\n      break;\n\n    case \"small\":\n      TextRender = ParagraphSmall;\n      break;\n\n    case \"tag\":\n      TextRender = ParagraphTag;\n      break;\n\n    case \"p\":\n      TextRender = Paragraph;\n      break;\n\n    default:\n      TextRender = ParagraphLg;\n  }\n\n  return __jsx(TextRender, _extends({\n    color: \"text\"\n  }, props));\n};\n\nexport default Text;","map":null,"metadata":{},"sourceType":"module"}