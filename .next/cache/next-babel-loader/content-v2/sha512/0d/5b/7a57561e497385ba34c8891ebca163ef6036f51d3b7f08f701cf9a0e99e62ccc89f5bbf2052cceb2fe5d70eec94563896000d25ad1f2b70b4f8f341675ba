{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\nimport { uniqueId } from \"lodash\";\nimport styled from \"styled-components\";\nimport { space, border, typography, shadow, flexbox, layout } from \"styled-system\";\nconst CheckStyled = styled.label`\n  display: inline-flex;\n  cursor: pointer;\n\n  input:checked ~ .check::before {\n    content: \"\\f14a\";\n    font-family: \"Font Awesome 5 free\";\n    font-weight: 900;\n    color: ${({\n  theme\n}) => theme.colors.secondary};\n  }\n\n  ${border};\n  ${space};\n  ${typography};\n  ${shadow};\n  ${flexbox};\n  ${layout};\n`;\nconst Check = styled.span`\n  position: relative;\n  line-height: 1;\n  top: -2px;\n  margin-right: 8px;\n  min-height: 20px;\n  min-width: 20px;\n  &::before {\n    content: \"\\f0c8\";\n    font-family: \"Font Awesome 5 free\";\n    font-size: 19px;\n    color: #e2e4e8;\n  }\n`;\nconst Text = styled.p`\n  color: ${({\n  theme\n}) => theme.colors.text};\n  font-size: 16px;\n  font-weight: 300;\n  line-height: 1;\n  margin-bottom: 0;\n`;\n\nconst Checkbox = (_ref) => {\n  let {\n    children = \"Keep me signed in\",\n    onClick = () => {}\n  } = _ref,\n      rest = _objectWithoutProperties(_ref, [\"children\", \"onClick\"]);\n\n  const uID = uniqueId(\"check_\");\n  return __jsx(CheckStyled, _extends({}, rest, {\n    htmlFor: uID\n  }), __jsx(\"input\", {\n    className: \"d-none\",\n    type: \"checkbox\",\n    id: uID\n  }), __jsx(Check, {\n    className: \"check\"\n  }), __jsx(Text, null, children));\n};\n\nexport default Checkbox;","map":null,"metadata":{},"sourceType":"module"}