{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\";\nimport { withTheme } from \"styled-components\";\nimport Select from \"react-select\";\nconst defaultOptions = [{\n  value: \"chocolate\",\n  label: \"Chocolate\"\n}, {\n  value: \"strawberry\",\n  label: \"Strawberry\"\n}, {\n  value: \"vanilla\",\n  label: \"Vanilla\"\n}];\n\nconst getCustomStyles = theme => {\n  return {\n    option: (provided, state) => _objectSpread(_objectSpread({}, provided), {}, {\n      color: state.isSelected ? theme.colors.secondary : theme.colors.dark,\n      backgroundColor: theme.colors.white\n    }),\n    control: (provided, state) => {\n      return _objectSpread(_objectSpread({}, provided), {}, {\n        border: state.menuIsOpen || state.isFocused ? `1px solid ${theme.colors.secondary} !important` : `1px solid ${theme.colors.border} !important`,\n        borderRadius: 10,\n        padding: \"1.275rem 1rem\",\n        outline: \"none\",\n        boxShadow: \"none\"\n      });\n    }\n  };\n};\n\nconst SelectStyled = (_ref) => {\n  let {\n    theme,\n    name = \"item\",\n    options = defaultOptions\n  } = _ref,\n      rest = _objectWithoutProperties(_ref, [\"theme\", \"name\", \"options\"]);\n\n  return __jsx(Select, _extends({\n    styles: getCustomStyles(theme),\n    defaultValue: options[1],\n    name: name,\n    options: options\n  }, rest));\n};\n\nexport default withTheme(SelectStyled);","map":null,"metadata":{},"sourceType":"module"}